[{"content":"애자일과 TDD 덕택에 단위 테스트를 자동화하는 프로그래머들이 이미 많아졌으며 점점 늘어나는 추세다. 하지만 우리 분야에 테스트를 추가하려고 급하게 서두르는 와중에 많은 프로그래머들이 제대로 된 테스트 케이스를 작성해야 한다는 좀 더 미묘한 사실을 놓쳐버렸다.\nTDD 법칙 세가지 #  실패하는 단위 테스트를 작성할 때까지 실제 코드를 작성하지 않는다. 컴파일은 실패하지 않으면서 실행이 실패하는 정도로만 단위 테스트를 작성한다. 현재 실패하는 테스트를 통과할 정도로만 실제 코드를 작성한다.  위 규칙을 따라 일하면 매일 수백, 수천개에 달하는 테스트케이스가 나온다. 실제 코드를 사실상 전부 테스트하는 테스트 케이스가 나온다. 하지만 실제 코드와 맞먹을 정도로 방대한 테스트 코드는 심각한 관리 문제를 유발하기도 한다.\n깨끗한 테스트 코드 유지하기 #  몇몇 팀에서는 단위 테스트에서는 실제 코드의 컨벤션 규칙을 깨도 좋다는 허가장을 준다.  ‘지저분해도 빨리\u0026rsquo;가 주제어 였다.   지저분한 테스트코드를 작성하는 것과 테스트를 안 하는 것은 오십보 백보이다. 아니, 오히려 지저분한 테스트 코드 작성이 더 못하다.  실제 코드가 진화하면 테스트 코드도 변해야 한다. 테스트 코드가 지저분할수록 변경하기 어렵다. 테스트 코드가 복잡할수록 실제 코드를 짜는 시간보다 테스트 케이스를 추가하는 시간이 더 걸린다.   새 버전을 출시할 때마다 팀이 테스트 케이스를 유지하고 보수하는 비용도 늘어난다.  점차 불만이 생기고, 테스트 슈트를 폐기하지 않으면 안 되는 상황에 처한다.   하지만, 테스트 슈트가 없으면 개발자는 자신이 수정한 코드가 제대로 도는지 확인할 수 없다.  시스템을 수정하면 다른쪽이 안전하다는 사실을 검증하지 못한다. 결함율이 높아지고, 개발자는 변경을 주저한다. 변경하면 득보다 해가 크다 생각해 더 이상 코드를 정리하지 않는다.   실패를 초래하는 원인은 테스트 코드를 막 짜도 좋다고 허용한 결정이다. 테스트 코드는 실제 코드 못지 않게 중요하다.  테스트 코드는 이류 시민이 아니다. 테스트 코드는 사고와 설계와 주의가 필요하다. 실제 코드 못지 않게 깨끗하게 짜야 한다.    테스트는 유연성, 유지보수성, 재사용성을 제공한다. #  테스트 코드를 깨끗하게 유지하지 않으면 결국은 잃어버린다. 테스트 케이스가 없으면 실제 코드를 유연하게 만드는 버팀목도 사라진다. 코드에 유연성, 유지보수성, 재사용성을 제공하는 버팀목이 바로 단위테스트이다. 테스트가 없으면 모든 변경이 잠정적인 버그다.  아키텍처가 아무리 유연하더라도 테스트 케이스가 없으면 개발자는 변경을 주저한다.   테스트 케이스가 있다면 공포는 사실상 사라진다.  아키텍처가 부실하더라도 별다른 우려 없이 변경할 수 있다.   실제 코드를 점검하는 자동화된 단위 테스트 슈트는 설계와 아키텍처를 최대한 깨끗하게 보존하는 열쇠다. 테스트는 유연성, 유지보수성, 재사용성을 제공한다. 테스트케이스가 있으면 변경이 쉬워지기 때문이다. 테스트 코드가 지저분하면 코드를 변경하는 능력이 떨어지며 코드 구조를 개선하는 능력도 떨어진다. 테스트 코드가 지저분할수록 실제 코드도 지저분해진다. 결국 테스트 코드를 잃어버리고 실제 코드도 망가진다.  깨끗한 테스트 코드 #  깨끗한 테스트 코드를 만들려면? 가독성이 필요하다. 어쩌면 실제 코드보다 더 가독성이 중요하다. 표현력  테스트 당 assert 하나 #  함수마다 assert 문을 단 하나만 사용해야 한다고 주장하는 사람들이 있다.  가혹한 규칙이라 여길지도 모르지만 확실히 장점이 있다. assert 문이 단 하나인 함수는 결론이 하나라서 코드를 이해하기 쉽고 빠르다.   하지만 개념이 같다면 한 함수에 assert를 여러개 써도 괜찮다.  단지 assert문의 개수를 최대한 줄여야 한다는 것에는 동의함 테스트 함수마다 한 개념만 테스트하라    F.I.R.S.T #  깨끗한 테스트는 다음 다섯 가지 규칙을 따르는데, 각 규칙에서 첫 글자를 따오면 FIRST이다. F: Fast  테스트는 빨라야한다. 느리면 자주 돌릴 엄두가 나지 않는다.   I: Independent  각 테스트는 서로 의존하면 안 된다. 각 테스트는 독립적으로 그리고 어떤 순서로 실행해도 괜찮아야 한다.   R: Repeatable  테스트는 어떤 환경에서도 반복 가능해야 한다. 실제 환경, QA, 심지어 네트워크에 연결되지 않은 환경에서도 실행할 수 있어야 한다. 테스트가 돌아가지 않는 환경이 하나라도 있다면 테스트가 실패한 이유를 둘러댈 변명이 생긴다.   S: Self-Validating  테스트는 bool값으로 결과를 내야 한다. 성공 아니면 실패 테스트가 스스로 성공, 실패를 가늠하지 않는다면 판단은 주관적이 되며 지루한 수작업 평가가 필요하게 된다.   T: Timely  테스트는 적시에 작성해야 한다. 단위 테스트는 테스트하려는 실제 코드를 구현하기 직전에 구현한다.    결론 #  테스트 코드는 실제 코드만큼이나 프로젝트 건강에 중요하다. 어쩌면 실제 코드보다 중요할 수 있다. 테스트 코드는 실제 코드의 유연성, 유지보수성, 재사용성을 보존하고 강화하기 때문이다. 테스트코드를 지속적으로 깨긋하게 관리하자. 표현력을 높이고 간결하게 정리하자.  ","date":"2022 / 05 / 18","permalink":"/posts/study/clean-code/09-unit-test/","section":"Posts","summary":"클린코드 9장 단위 테스트","title":"클린코드 9장 단위 테스트"},{"content":"깨끗한 코드와 오류처리는 연관성이 있다. 상당수 코드 기반은 전적으로 오류 처리 코드에 좌우된다. 하지만 오류 처리 코드로 인해 프로그램 논리를 이해하기 어려워진다면 깨끗한 코드라 부르기 어렵다.\n오류 코드보다 예외를 사용하라 #  오류 코드를 리턴하고 호출문에서 리턴받은 오류 코드를 확인하여 처리하는 방식은 호출자 코드가 복잡해진다. 함수를 호출한 즉시 오류를 확인해야 하기 때문이다. 오류가 발생하면 예외를 던지는 편이 호출자 코드가 더 깔끔해진다. 논리가 오류 처리 코드와 뒤섞이지 않으니까.  Try-Catch-Finally 문부터 작성하라 #  어떤 면에서 try 블록은 트랜잭션과 비슷하다.  try 블록에서 무슨 일이 생기든지 catch 블록은 프로그램 상태를 일관성 있게 유지해야 한다.   예외가 발생할 코드를 짤 때는 try-catch-finally 문으로 시작하는 편이 낫다.  try 블록에서 무슨 일이 생기든지 호출자가 기대하는 상태를 정의하기 쉬워진다.   먼저 강제로 예외를 일으키는 테스트 케이스를 작성한 후 테스트를 통과하게 코드를 작성하는 방법을 권장한다.  미확인 예외를 사용하라 #  확인된 예외가 반드시 필요하지는 않다. 확인된 예외는 OCP를 위반한다.  메서드에서 확인된 예외를 던졌는데 catch 블록이 세 단계 위에 있다면 그 사이 메서드 모두가 선언부에 해당 예외를 정의해야 한다. 즉, 하위 단계에서 코드를 변경하면 상위 단계 메서드 선언부를 전부 고쳐야 한다.   솔직히 잘 모르겠다.  예외에 의미를 제공하라 #  예외를 던질 때는 전후 상황을 충분히 덧붙인다. 그러면 오류가 발생한 원인과 위치를 찾기가 쉬워진다.  호출자를 고려해 예외 클래스를 정의하라 #  외부 API를 사용할 때는 감싸기 기법이 최선이다.  외부 api를 감싸면 외부 라이브러리와 프로그램 사이에서 의존성이 크게 줄어든다. 또한 감싸기 클래스에서 외부 api를 호출하는 대신 테스트 코드를 넣어주는 방법으로 프로그램 테스트하기도 쉽다.    // ACMEPort가 외부 api 인 상황에서 LocalPort 클래스를 생성하여 // 외부 api를 감싸고 예외처리를 추가함 class LocalPort { #innerPort: ACMEPort; constructor() { this.#innerPort = new ACMEPort(); } open = () =\u0026gt; { try { this.#innerPort.open(); } catch (e) { throw new PortDeviceFailure(e); } ... }; } 정상 흐름을 정의하라 #  특수 사례 패턴 → 클라이언트 코드가 예외적인 상황을 처리할 필요가 없도록 클래스나 객체를 조작해 특수사례를 처리하는 방식  // employ의 식비를 총계에 더한다. // 만약 식비를 비용으로 청구하지 않았다면 일일 기본 식비를 총계에 더한다. function getTotal(employList) { let m_total = 0; for (let employee of employList) { const expenses = expenseReportDAO.getMeals(employee.getID()); try { m_total += expenses.getTotal(); } catch { m_total += getMealPerDiem(); } } return m_total; } // 하지만 expense.getTotal 함수의 기본값으로 일일 기본 식비를 반환한다면 // 클라이언트 코드에서 예외 상황을 처리할 필요가 없어진다. function getTotal(employList) { let m_total = 0; for (let employee of employList) { const expenses = expenseReportDAO.getMeals(employee.getID()); m_total += expenses.getTotal(); } return m_total; } null을 반환하지마라 #  null을 반환하면 한 줄 건너 하나씩 null을 확인하는 코드로 가득한 애플리케이션이 된다. Null을 반환하는 코드는 일거리를 늘릴 뿐만 아니라 호출자에게 문제를 떠넘긴다. 많은 경우 특수사례 패턴이 좋은 해결책이다.  null을 전달하지 마라 #  메서드로 null을 전달하는 방식은 더 나쁘다.  결론 #  깨끗한 코드는 읽기도 좋아야 하지만 안정성도 높아야 한다. 이 둘은 상충하는 목표가 아니다. 오류 처리를 프로그램 논리와 분리해 독자적인 사안으로 고려하면 튼튼하고 깨끗한 코드를 작성할 수 있다. 오류 처리를 프로그램 논리와 분리하면 독립적인 추론이 가능해지며 코드 유지보수성도 크게 높아진다.  ","date":"2022 / 05 / 14","permalink":"/posts/study/clean-code/07-error/","section":"Posts","summary":"클린코드 7장 오류 처리","title":"클린코드 7장 오류 처리"},{"content":"시스템에 들어가는 모든 소프트웨어를 직접 개발하는 경우는 드물다. 때로는 어떤 식으로든 외부 코드를 우리 코드에 깔끔하게 통합해야만 한다. 이 장에서는 소프트웨어 경계를 깔끔하게 처리하는 기법과 기교를 살펴본다.\n외부 코드 사용하기 #  인터페이스 제공자와 사용자 사이에는 특유의 긴장이 존재한다.  패키지 제공자는 적용성을 최대한 넓히려 애쓴다. 더 많은 환경에서 돌아가야 더 많은 고객이 구매하니까. 반면, 사용자는 자신의 요구에 집중하는 인터페이스를 바란다. 이런 긴장으로 인해 시스템 경계에서 문제가 생길 소지가 많다.   자바의 Map 예시 → 경계 인터페이스인 Map을 Sensors라는 커스텀 클래스로 숨기고 Sensors에서 필요한 인터페이스를 제공함.  외부 패키지를 자신의 클래스로 감싸서 인터페이스를 다시 정의하려는 의도인 것 같은데 갠적으로 이 예시에선 제네릭 쓰는게 나아보인다.    경계 살피고 익히기 #  외부 패키지 테스트는 우리 책임이 아니다. 하지만 우리 자신을 위해 우리가 사용할 코드를 테스트하는 편이 바람직하다. 곧바로 우리쪽 코드를 작성해 외부 코드를 호출하는 대신 먼저 간단한 테스트 케이스를 작성해 외부 코드를 익혀보자 → 학습 테스트  학습 테스트는 공짜 이상이다 #  학습 테스트는 이해도를 높여줄 뿐만 아니라 패키지가 예상대로 도는지 검증도 한다. 통합한 이후라고 하더라도 패키지가 우리 코드와 항상 호환되리라는 보장은 없다. 패키지 새 버전이 나올 때 마다 새로운 위험이 생긴다. 학습테스트를 통해 위험을 감지 할 수 있다.  아직 존재하지 않는 코드를 사용하기 #  경계와 관련해 다른 유형은 아는 코드와 모르는 코드를 분리하는 경계다. 때로는 우리 지식이 경계를 너머 미치지 못하는 코드 영역도 있다. 자체적으로 인터페이스를 정의하자. 우리가 바라는 인터페이스를 구현하면 우리가 인터페이스를 전적으로 통제한다는 장점이 생긴다. 코드 가독성도 높아지고 코드 의도도 분명해진다. 외부 api가 완성된 후에는 어댑터 패턴으로 api 사용을 캡슐화한다. 이와 같은 설계는 테스트도 아주 편하다.  깨끗한 경계 #  경계에서는 흥미로운 일이 많이 벌어진다. 변경이 대표적이다. 소프트웨어 설계가 우수하다면 변경하는데 많은 투자와 재작업이 필요하지 않다. 엄청난 시간과 노력과 재작업을 요구하지 않는다. 통제하지 못하는 코드를 사용할 때는 너무 많은 투자를 하거나 향후 변경 비용이 지나치게 커지지 않도록 각별히 주의하자. 경계에 위치하는 코드는 깔끔히 분리하고, 기대치를 정의하는 테스트 케이스도 작성한다. 통제가 불가능한 외부 패키지에 의존하는 대신 통제가 가능한 우리 코드에 의존하는 편이 좋다.  ","date":"2022 / 05 / 14","permalink":"/posts/study/clean-code/08-boundaries/","section":"Posts","summary":"클린코드 8장 경계","title":"클린코드 8장 경계"},{"content":"변수를 비공개로 정의하는 이유는 남들이 변수에 의존하지 않게 만들고 싶어서다.\n충동이든 변덕이든, 변수 타입이나 구현을 맘대로 바꾸고 싶어서다.\n그렇다면 어째서 수많은 프로그래머가 get함수와 set함수를 당연하게 공개해 비공개 변수를 외부로 노출하는가?\n자료 추상화 # public class Point1 { public double x; public double y; } public class Point2 { double getX(); double getY(); void setCartesian(double x, double y); double getR(); double getTheta(); void setPolar(double r, double theta); }  변수를 Private으로 선언하더라도 각 값마다 조회(get)함수와 설정(set)함수를 제공한다면 구현을 외부로 노출하는 셈이다. 변수 사이에 함수라는 계층을 넣는다고 구현이 저절로 감춰지는게 아니다. 구현을 감추려면 추상화가 필요하다. 조회 함수와 설정 함수로 변수를 다룬다고 클래스가 되는게 아니라, 추상 인터페이스를 제공해 사용자가 구현을 모른 채 자료의 핵심을 조작할 수 있어야 진정한 의미의 클래스다. 자료를 세세하게 공개하기 보다는 추상적인 개념으로 표현하는 편이 좋다. 인터페이스나 조회/설정 함수만으로 추상화가 이뤄지는게 아니다. 개발자는 객체가 포함하는 자료를 표현할 가장 좋은 방법을 고민해야 한다. 아무 생각없이 조회/설정 함수를 추가하는 방법이 가장 나쁘다.  자료/객체 비대칭 #  객체는 추상화 뒤로 자료를 숨긴 채 자료를 다루는 함수만 공개한다. 자료 구조는 자료를 그대로 공개하며 별다른 함수는 제공하지 않는다. 절차적인 코드는 기존 자료 구조를 변경하지 않으면서 새 함수를 추가하기 쉽다. 반면, 객체지향 코드는 기존 함수를 변경하지 않으면서 새 클래스를 추가하기 쉽다. 반대쪽도 참이다. 절차적인 코드는 새로운 자료구조를 추가하기 어렵다. 모든 함수를 고쳐야 한다. 객체 지향 코드는 새로운 함수를 추가하기 어렵다. 모든 클래스를 고쳐야 한다. 다시말해, 객체 지향 코드에서 어려운 변경은 절차적인 코드에서 쉬우며, 절차적인 코드에서 어려운 변경은 객체지향에서 쉽다. 분별있는 프로그래머는 모든 것이 객체라는 생각이 미신임을 잘 안다. 때로는 단순한 자료구조와 절차적인 코드가 가장 적합한 상황도 있다.  디미터 법칙 #  디미터 법칙은 잘 알려진 휴리스틱으로, 모듈은 자신이 조작하는 객체의 속사정을 몰라야 한다는 법칙이다. 객체는 자료를 숨기고 함수를 공개한다. 즉, 객체는 조회 함수로 내부 구조를 공개하면 안 된다는 의미다. 그러면 내부 구조를 노출하는 셈이니까.  기차 충돌 # final String outputDir = ctxt.getOptions().getScratchDir().getAbsoultePath()  위와 같은 코드를 기차 충돌이라 부른다. 여러 객체가 한 줄로 이어진 기차처럼 보이기 때문이다. 일반적으로 조잡하다 여겨지는 방식이므로 피하는 편이 좋다. 위 코드는 다음과 같이 나누는 편이다.  Options opts = ctxt.getOptions(); File scratchDir = opts.getScratchDir(); final String outputDir = scratchDir.getAbsolutePath();  위 예제가 디미터 법칙을 위반할까? ctxt, Options, ScratchDir이 객체인지 자료구조인지에 달렸다.  객체라면 내부 구조를 숨겨야 하므로 확실히 디미터 법칙을 위반한다. 반면, 자료 구조라면 당연히 내부 구조를 노출하므로 디미터 법칙이 적용되지 않는다.   위 예제는 조회함수를 사용하기 때문에 혼란스럽다 코드를 다음과 같이 구현했다면 디미터 법칙을 거론할 필요가 없어진다.  final String outputDir = ctxt.options.scratchDir.absolutePath;  자료구조는 무조건 함수 없이 공개 변수만 포함하고 객체는 비공개 변수와 공개 함수를 포함한다면 문제는 훨씬 간단해진다.  잡종 구조 #  이런 혼란으로 말미암아 때때로 절반은 객체, 절반은 자료구조인 잡종 구조가 나온다. 잡종 구조는 중요한 기능을 수행하는 함수도 있고, 공개 변수나 공개 조회/설정 함수도 있다. 이러한 잡종 구조는 새로운 함수는 물론이고 새로운 자료구조도 추가하기 어렵다.  구조체 감추기 #  위 코드를 어떻게 개선할 수 있을까?  ctxt.getAbsolutePathOfScratchDirectoryOption(); ctxt.getScratchDirectoryOption().getAbsolutePath();  둘다 맘에 들지 않는다. 절대 경로가 필요한 원인을 찾자. 절대 경로를 어디서 쓰는가? 위 예제에서는 임시파일을 생성하기위해 절대 경로를 가져왔다. ctxt 객체에 임시 파일을 생성하라고 시키는건 어떨까?  BufferedOutputStream bos = ctxt.createScratchFileStream(classFileName);  객체에 맡기기 적합한 임무이다. ctxt는 내부 구조를 드러내지 않으며, 모듈에서 해당 함수는 자신이 몰라야 하는 여러 객체를 탐색할 필요가 없다. 따라서 디미터 법칙을 위반하지 않는다.  ","date":"2022 / 05 / 10","permalink":"/posts/study/clean-code/06-object-data-structure/","section":"Posts","summary":"클린코드 6장 객체와 자료구조","title":"클린코드 6장 객체와 자료구조"},{"content":"프로그래머라면 형식을 깔금하게 맞춰 코드를 짜야 한다. 코드 형식을 맞추기 위한 간단한 규칙을 정하고 그 규칙을 따라야 한다. 팀으로 일한다면 팀이 합의해 규칙을 정하고 모두가 그 규칙을 따라야 한다.\n형식을 맞추는 목적 #  ‘돌아가는 코드\u0026rsquo;가 개발자의 일차적인 의무라 여길지도 모른다. 하지만 오늘 구현한 기능이 다음 버전에서 바뀔 확률은 아주 높다. 그런데 오늘 구현한 코드의 가독성은 앞으로 바뀔 코드의 품질에 지대한 영향을 미친다. 오랜 시간이 지나 원래 코드의 흔적을 더 이상 찾아보기 어려울 정도로 코드가 바뀌어도 맨 처음 잡아놓은 구현 스타일과 가독성 수준은 유지보수 용이성과 확장성에 계속 영향을 미친다. 원래 코드는 사라질지라도 개발자의 스타일과 규율은 사라지지 않는다.  적절한 행 길이를 유지하라 #  7개의 자바 라이브러리를 조사한 결과 파일의 길이가 500줄을 넘지 않고, 대부분 200줄 정도인 파일로 구축되어 있었다.  신문 기사처럼 작성하라 #  독자는 위에서 아래로 기사를 읽는다. 최상단에 기사를 몇 마디로 요약하는 표제가 나온다. 첫 문단은 전체 기사 내용을 요약한다. 세세한 사실은 숨기고 커다란 그림을 보여준다. 쭉 읽으며 내려가면 세세한 사실이 조금씩 드러나고, 기타 세부사항이 나온다. 소스파일도 신문 기사와 비슷하게 작성하자. 소스파일의 첫 부분은 고차원 개념과 알고리즘을 설명하고, 아래로 내려갈수록 의도를 세세하게 묘사하자. 마지막에는 가장 저차원 함수와 세부 내역이 나온다.  개념은 빈 행으로 분리하라 #  거의 모든 코드는 왼쪽에서 오른쪽으로, 위에서 아래로 읽힌다. 각 행은 수식이나 절을 나태내고, 일련의 행 묶음은 완결된 생각 하나를 표현한다. 생각 사이는 빈 행을 넣어 분리해야 마땅하다.  세로 밀집도 #  줄바꿈이 개념을 분리한다면 세로 밀집도는 연관성을 의미한다. 즉, 서로 밀접한 코드 행은 세로로 가까이 놓여야 한다. 함수 연관 관계와 동작 방식을 이해하려고 이 함수에서 저 함수로 오가며 소스 파일을 위아래로 뒤지는 등 뱅뺑이를 돌았으나 결국은 미로 같은 코드 때문에 혼란만 가중된 경험이 있는가?  가로 형식 맞추기 #  80자에서 120자 사이 권장  ","date":"2022 / 05 / 08","permalink":"/posts/study/clean-code/05-convention/","section":"Posts","summary":"클린코드 5장 형식 맞추기","title":"클린코드 5장 형식 맞추기"},{"content":" 나쁜 코드에 주석을 달지마라. 새로 짜라. - 브라이언 w커니핸 플라우거\n 잘 달린 주석은 유용하지만, 경솔하고 근거없는 주석은 코드를 이해하고 어렵게 만든다. 오래되고 조잡한 주석은 거짓과 잘못된 정보를 퍼뜨린다.\n주석은 쉰들러리스트가 아니다. 순수하게 선하지 못하다. 코드 자체가 표현력이 풍부하다면, 주석은 필요하지 않다. 우리는 코드로 의도를 표현하지 못해, 그러니까 실패를 만회하기 위해 주석을 사용한다. 주석은 언제나 실패를 의미한다.\n주석은 오래될수록 코드에서 멀어진다. 오래될수록 완전히 그릇될 가능성도 있다. 프로그래머들이 주석을 유지보수하긴 현실적으로 불가능하다. 주석이 언제나 코드를 따라가진 않는다.\n주석을 엄격하게 관리하느니, 코드를 깔끔하게 정리하고 표현력을 강화하는 방향으로 에너지를 쏟아라. 부정확한 주석은 아예 없는 것 보다 나쁘다.\n진실은 한 곳에 존재한다. 바로 코드다. 코드만이 자기가 하는 일을 진실되게 말한다.\n주석은 나쁜 코드를 보완하지 못한다. #  코드에 주석을 추가하는 일반적인 이유는 코드 품질이 나쁘기 때문이다. 표현력이 풍부하고 깔끔하며 주석이 거의 없는 코드가, 복잡하며 어수선하고 주석이 많이 달린 코드보다 훨씬 좋다.  코드로 의도를 표현하라. # // 직원에게 복지 혜택을 받을 자격이 있는지 검사한다. if((employee.flags \u0026amp; HOURY_FLAG) \u0026amp;\u0026amp; (employee.age \u0026gt; 65)) --- if(employee.isEligibleForFullBenefits())  위 코드보다 아래 코드가 훨씬 낫다. 주석이 없어도 코드로 의도를 표현할 수 있다.  좋은 주석 #  법적 정보 정보 제공 // kk:mm:ss EEE, MMM, dd, yyyy 형식이다. Pattern timeMatcher = Pattern.compile( ... )  위 코드는 정규표현식이 시각과 날짜를 뜻한다고 설명한다. 이왕이면 시각과 날짜를 변환하는 클래스를 만들어 코드를 옮겨주면 더 좋고 깔끔하겠다.   의도를 설명하는 주석 의미를 명료하게 밝히는 주석 TODO 주석 중요성을 강조하는 주석  위 주석들 중 내 생각에 꼭 필요한건 법적정보와 TODO 뿐인 것 같다. 나머지는 없앨 수 있다면 없애는게 더 낫다.\n나쁜 주석 #  주절거리는 주석  특별한 이유 없이 의무감으로 혹은 프로세스에서 하라고 하니까 마지못해 주석을 단다면 시간낭비다.   같은 이야기를 중복하는 주석  코드 내용을 그대로 중복설명   오해할 여지가 있는 주석 의무적으로 다는 주석  javadocs   이력을 기록하는 주석  git 쓰니까 필요없음   함수나 변수로 표현할 수 있다면 주석을 달지 마라 생략  대다수의 주석은 나쁘다. 코드로 의도를 표현하자.\n","date":"2022 / 05 / 07","permalink":"/posts/study/clean-code/04-comment/","section":"Posts","summary":"클린코드 4장 주석","title":"클린코드 4장 주석"},{"content":"사이드로 만들 사이트 인증 쪽 하다가 배운 것 정리\nsupabase란? # https://supabase.com/\n파이어베이스 대체제로 나온 서비스이다. 파이어베이스보다 좋은 점은 PostgreSQL을 데이터베이스로 사용이 가능하다. 파이어베이스는 db 쿼리가 좋지 않은 거로 아는데, 이 부분에선 PostgreSQL을 쓸 수 있는 supabase가 확실히 낫다. 그리고 셀프 호스팅으로 저렴하게 사용할 수 있어서 호감이다.\n이 포스팅에서 다룰 인증은 파이어 베이스에도 있는 기능이다. 아마 사용방식도 비슷할 것 같다.\n프로젝트 설정 # https://app.supabase.io/\nsupabase에서 프로젝트 생성 후, authentication 설정을 들어간다.\n   사이트 url과 jwt expiry를 설정하자. jwt 만료시간은 accessToken에 적용된다. refreshToken은 왜 없는지 궁금했는데, jwt 토큰 형식이 아니었다.\n{ \u0026#34;provider_token\u0026#34;: null, \u0026#34;access_token\u0026#34;: \u0026#34;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJhdXRoZW50aWNhdGVkIiwiZXhwIjoxNjUxNzU1ODkyLCJzdWIiOiJjYjE5NDliNy0yNzJkLTQ2OWItYjRiYS01M2RhMDE4YTllMmIiLCJlbWFpbCI6InNvc28wMWRldkBnbWFpbC5jb20iLCJwaG9uZSI6IiIsImFwcF9tZXRhZGF0YSI6eyJwcm92aWRlciI6ImVtYWlsIiwicHJvdmlkZXJzIjpbImVtYWlsIl19LCJ1c2VyX21ldGFkYXRhIjp7fSwicm9sZSI6ImF1dGhlbnRpY2F0ZWQifQ.6wch2tYoc3ynLl_RxM7ZGFH4DrREOGDO8HyV-H2-T6o\u0026#34;, \u0026#34;expires_in\u0026#34;: 3600, \u0026#34;expires_at\u0026#34;: 1651755893, \u0026#34;refresh_token\u0026#34;: \u0026#34;YfHHAXSBlltxLoJ4kbXU5Q\u0026#34;, \u0026#34;token_type\u0026#34;: \u0026#34;bearer\u0026#34;, \u0026#34;user\u0026#34;: { ... } } 위 포맷으로 세션 정보를 가져온다. refresh 토큰은 jwt 토큰이 아닌, 그냥 키값이었다. 그리고 세션을 갱신할 때마다 refresh_token도 변경된다. 평소에 사용하던 jwt 토큰의 refresh 방식이 아니라 일회용 키값을 발급해주는 식인 것 같은데 만료가 되는지는 잘 모르겠다.\n프론트엔드 설정 # import { createClient } from \u0026#34;@supabase/supabase-js\u0026#34;; const supabaseUrl = import.meta.env.VITE_SUPABASE_URL; const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY; export const supabase = createClient(supabaseUrl, supabaseAnonKey); @supabase/supabase-js js 용 supabase 라이브러리를 설치 후, supabaseClient 인스턴스를 생성한다.\nawait supabase.auth.signIn({ email }); 그리고 생성한 supabase 인스턴스에 auth.signIn() 으로 로그인을 요청할 수 있다. 이메일만 설정하면 자동으로 매직 링크 로그인 방식으로 인지하고 이메일을 보낸다.\n   이메일의 기본 포맷은 위와 같다. 링크 주소는 https://ycfqxoxuzltvyozzmbdt.supabase.co/auth/v1/verify?token=oseidldaadtnhomfwdme\u0026amp;type=magiclink\u0026amp;redirect_to=http://localhost:3000/\n인데, token이 리프레쉬 토큰이고, 액세스 토큰을 발급해서 redirect 주소로 쿼리스트링과 함께 보내주는 듯 하다.\n// 리프레쉬 supabase.auth.refreshSession(); // 로그아웃 supabase.auth.signOut(); 리프레쉬와 로그아웃 호출은 위와 같이 메서드를 호출 하면 된다.\naxios 설정 #       supabase 대시보드에서 액세스 jwt 토큰의 시크릿 키를 제공해 주기 때문에, 독자적으로 accesskey verify를 할 수 있다. 그래서 나는 supabase를 인증서버로만 사용하고, 비즈니스 로직을 다룰 백엔드 서버는 따로 두려고 한다.\n프론트에서 supabase의 액세스키를 헤더에 실어서 백엔드로 보내고, 백엔드에선 jwt를 verify하고 payload에 담긴 유저 id(sub)으로 로직을 수행한다.\nimport axios, { Axios, AxiosError } from \u0026#34;axios\u0026#34;; import { supabase } from \u0026#34;@/config/supabaseClient\u0026#34;; import { Session, SupabaseClient } from \u0026#34;@supabase/supabase-js\u0026#34;; class API { api: Axios; supabase: SupabaseClient; constructor(supabase: SupabaseClient) { this.api = axios.create(); this.supabase = supabase; this.setBaseURL(); this.setAuthorization(this.supabase.auth.session()); this.setInterceptor(); } setBaseURL() { this.api.defaults.baseURL = import.meta.env.VITE_BASE_URL; } setAuthorization(session: Session | null) { const accessToken = session?.access_token; const authorization = accessToken ? `Bearer ${accessToken}` : \u0026#34;\u0026#34;; this.api.defaults.headers.common[\u0026#34;Authorization\u0026#34;] = authorization; } setInterceptor() { this.api.interceptors.response.use( (res) =\u0026gt; res, async (error: AxiosError) =\u0026gt; { const { config, response } = error; if (response?.status === 401 \u0026amp;\u0026amp; this.supabase.auth.session()) { const accessToken = await this.refresh(); if (accessToken) { return axios({ ...config, headers: { Authorization: `Bearer ${accessToken}`, }, }); } } return Promise.reject(error); } ); } async refresh() { const response = await this.supabase.auth.refreshSession(); this.setAuthorization(this.supabase.auth.session()); return response.data?.access_token; } logout() { this.supabase.auth.signOut(); } } export const apiSetting = new API(supabase); export const api = apiSetting.api; 내 백엔드에 http 요청을 보내기 위해 axios 인스턴스도 따로 설정했다.\n로그인하면 setAuthorization 메서드로 헤더에 액세스토큰을 설정하고, 만약 백엔드에서 401 에러를 반환하면, 인터셉터에서 supabase에서 제공하는 refresh 메서드를 실행 후 재요청한다.\n백엔드는 nestjs 다시 공부하고 추가 예정\n후기 # 외부 서비스로 인증하니 너무 쉽고 편하게 구현할 수 있어서 좋았다. 전에 인증 서비스로 auth0가 유명하길래 봤는데, 그건 너무 비싸서 사용할 엄두가 안 났었다. supabase는 인증서버로만 사용한다면 사실상 평생 무료처럼 보인다. 앞으로 사이드프로젝트에서 인증은 무조건 이거 쓸 것 같다.\n","date":"2022 / 05 / 05","permalink":"/posts/dev/supabase_auth/","section":"Posts","summary":"supabase으로 매직링크 사용자 인증","title":"supabase으로 매직링크 사용자 인증"},{"content":"트위터 계정을 만들었다.\n계기는 개발바닥 유튜브에서 향로님이 개발관련 정보를 어디서 얻느냐는 질문에 트위터라고 답했는데, 되게 의외라서 기억에 남았다. 트위터에서 개발을?\n오늘 가입하고 둘러봤는데 볼게 많아서 너무 재밌다. 생각보다 고연차 개발자분들이 많아서 신기했다.\n아이패드 사고 미디엄 처음 구독했을 때와 비슷한 느낌이다. 이 기분이 오래갔으면 좋겠다.\n내 트위터 주소 - https://twitter.com/soso01_dev\n","date":"2022 / 05 / 03","permalink":"/posts/etc/%ED%8A%B8%EC%9C%84%ED%84%B0_%EA%B3%84%EC%A0%95_%EC%83%9D%EC%84%B1/","section":"Posts","summary":"트위터 계정 생성","title":"트위터 계정 생성"},{"content":"작게 만들어라. #  함수를 만드는 첫째 규칙은 ‘작게\u0026rsquo;이고, 둘째도 ‘작게\u0026rsquo;다. 켄트 백의 프로그램 Sparkle은 모든 함수가 2~4줄 정도였고, 각 함수가 너무도 명백했다.  블록과 들여쓰기 #  if / else문, while문 등에 들어가는 블록은 한줄이어야 한다. 대게 거기서 함수를 호출한다. 이 말은 즉, 중첩 구조가 생길만큼 함수가 커져서는 안된다는 의미이다.  한 가지만 해라! #  함수는 한 가지를 해야 한다. 그 한 가지를 잘 해야 한다. 그 한 가지만을 해야한다. ‘한 가지\u0026rsquo;란? 추상적인 수준의 하나의 작업을 의미한다.  예를 들어 ‘물마시기\u0026rsquo;는 컵을 들고 → 입에 가져다 대고 → 마신다 라는 과정을 거치지만 ‘물을 마신다\u0026rsquo;라는 추상적 개념으로 하나의 작업으로 볼 수 있음.   우리가 함수를 만드는 이유는 큰 개념을 다음 추상화 수준에서 여러 단계로 나눠 수행하기 위해서이다. 단순히 다른 표현이 아니라 의미 있는 이름으로 다른 함수를 추출할 수 있다면 그 함수는 여러 작업을 하는 셈이다.  함수당 추상화 수준은 하나로! #  함수가 확실히 ‘한 가지\u0026rsquo; 작업만 하려면 함수 내 모든 문장의 추상화 수준이 동일해야 한다. 한 함수 내에 추상화 수준을 섞으면 코드를 읽는 사람이 헷갈린다.  특정 표현이 근본 개념인지 아니면 세부사항인지 구분하기 어렵기 때문이다. 근본 개념과 세부사항을 뒤섞기 시작하면, 깨어진 창문처럼 사람들이 함수에 세부사항을 점점 더 추가한다.   내려가기 규칙  코드는 위에서 아래로 이야기처럼 읽혀야 좋다. 한 함수 다음에는 추상화 수준이 한 단계 낮은 함수가 온다. 즉, 위에서 아래로 프로그램을 읽으면 함수 추상화 수준이 한 번에 한 단계씩 낮아진다.    switch 문 #  본질적으로 switch 문은 N가지를 처리한다. 각 switch 문을 저차원 클래스에 숨기고 절대로 반복하지 않는 방법이 있다. 다형성을 이용하자. switch문을 추상 팩토리에 숨기고, 파생 클래스가 함수를 실행하도록 하자.  서술적인 이름을 사용하라! #  워드가 말했던 클린 코드의 원칙, “코드를 읽으면서 짐작했던 기능을 각 루틴이 그대로 수행한다면 클린 코드라 불러도 된다.” 한 가지만 하는 작은 함수에 좋은 이름을 붙인다면 이 원칙을 달성함에 있어 이미 절반은 성공한다. 함수가 작고 단순할수록 서술적인 이름을 고르기도 쉬워진다. 이름이 길어도 괜찮다. 길고 서술적인 이름이 짧고 어려운 이름보다 좋다. 서술적인 이름을 사용하면 개발자 머릿속에서도 설계가 뚜렷해지므로 코드를 개선하기 쉬워진다.  함수 인수 #  이상적인 인수는 0개다. 다음은 1개이고, 3개 이상은 가능한 피하자. 테스트 관점에서 보면 인수는 어렵다.  갖가지 인수 조합으로 함수를 검증하는 테스트 케이스를 작성한다고 상상해보자. 인수가 0개이면 간단하다. 3개이상이면 상당히 부담스럽다.   출력 인수는 입력 인수보다 이해하기 어렵다.  흔히 우리는 함수에다 인수로 입력을 넘기고 반환값으로 출력을 받는다는 개념에 익숙하다. 대개 함수에서 인수로 결과를 받으리라 기대하지 않는다.   단항 형식  함수에 인수를 1개 넘기는 이유로 가장 흔한 경우 두가지이다.  인수에 질문을 던지는 경우 인수를 뭔가로 변환해 결과를 반환하는 경우   드물지만 단한 함수 형식 이벤트도 사용함.   플래그 인수  플래그 인수는 끔찍하다. 함수가 한꺼번에 여러 가지를 처리한다고 대놓고 공표하는 셈이나 마찬가지이다.   이항 함수  인수가 2개이면 1개인 경우보다 이해하기 어렵다. new Point(x, y)와 같은 경우는 적절하다. x, y는 자연적인 순서를 가진다. 하지만 다른 경우 인수간에 자연적 순서가 없이, 인위적인 순서를 기억해야 하는 불편함을 가진다. 이항 함수는 프로그램을 짜다보면 불가피한 경우도 생기지만, 가능하다면 단항함수로 바꾸도록 노력하자.   인수 객체  makeCircle(x, y, radius)를 인수 객체를 사용해 makeCircle(point, radius)로 고칠 수 있다.    사이드 이펙트를 일으키지마라 #  사이드 이펙트는 거짓말이다. 함수에서 한 가지를 하겠다고 약속하고선 남몰래 다른 짓을 하니까. 사이드 이펙트는 ‘시간적인 결합\u0026rsquo;이나 ‘순서 종속성\u0026rsquo;을 초래할 수 있다.  명령과 조회를 분리하라! #  함수는 뭔가를 수행하거나 뭔가에 답하거나 둘 중 하나만 해야 한다. 둘 다 하면 혼란을 초래한다.  오류 코드보다 예외를 사용하자 # if (deletePage(page)) === E_OK)  명령 함수에서 오류 코드를 반환하는 방식은 명령/조회 분리 규칙을 미묘하게 위반한다.  자칫하면 if문에서 명령을 표현식으로 사용하기 쉬운 탓이다. ??   위 코드는 여러 단계로 중첩되는 코드를 야기한다. 오류 코드를 반환하면 호출자는 오류 코드를 곧바로 처리해야 한다는 문제에 부딪힌다. try / catch 블록은 추하다.  코드 구조에 혼란을 일으키며, 정상 동작과 오류 처리 동작을 뒤섞는다. 그러므로 try / catch 블록을 별도 함수로 뽑아내는 편이 좋다.   오류 처리도 한 가지 작업이다.  함수는 ‘한 가지\u0026rsquo; 작업만 해야 한다. 오류처리도 작업에 속한다. 오류를 처리하는 함수는 오류만 처리해야 마땅하다.    반복하지 마라! #  중복은 문제다. 코드 길이가 늘어날 뿐 아니라 알고리즘이 변하면 네 곳이나 손봐야 한다.  함수를 어떻게 짜죠? #  소프트웨어를 짜는 행위는 여느 글짓기와 비슷하다. 논문이나 기사를 작성할 때는 먼저 생각을 기록한 후 읽기 좋게 다듬는다. 함수도 마찬가지로 처음에는 길고 복잡하다. 들여쓰기 단계도 많고 중복된 루프도 많다. 인수 목록도 아주 길다. 이름은 즉흥적이고 코드는 중복된다. 그 코드를 테스트하는 단위테스트 코드를 만들고 코드를 다듬고, 함수를 만들고, 이름을 바꾸고, 중복을 제거해야 한다. 최종적으로 이 장에서 설명한 규칙을 따르는 함수가 얻어진다. 처음부터 짜내는건 어렵다.  결론 #  함수는 언어에서 동사며, 클래스는 명사다. 마스터 프로그래머는 시스템을 구현할 프로그램이 아니라 풀어갈 이야기로 여긴다. 이 장에서 함수를 잘 만드는 기교를 소개했지만, 진짜 목표는 시스템이라는 이야기를 잘 풀어나가는 데 있다는 사실을 명심하자.  ","date":"2022 / 04 / 30","permalink":"/posts/study/clean-code/03-function/","section":"Posts","summary":"클린코드 3장 함수 요약","title":"클린코드 3장 함수 요약"},{"content":"**클라이언트 측 아키텍처 기본**\nhttps://khalilstemmler.com/articles/client-side-architecture/introduction/\n리액트 애플리케이션의 아키텍처는 널리 인정되어 있는 표준이 없다. 매번 프로젝트를 시작하는 방법, 사용할 프레임워크, 상태 관리 방법, 번들로 제공되는 방법, 접근성 및 배포를 시작하는 방법까지 매번 선택해야 한다.\n이 게시글은 이러한 고민에서 도움이 될 클라이언트 측 아키텍처 원칙을 소개한다.\n아키텍처 # MVC, MVP 는 너무 일반적이다. # 훌륭한 아키텍처지만 불행히 둘 다 너무 일반적인 문제를 겪는다.(generic 일반적?)\nMVC와 MVP에서 모두 모델이 너무 많은 책임을 진다는 것이다. 결과적으로 개발자는 어떤 도구가 어떤 작업을 담당하는지 모르게 된다.\nMVC와 MVP의 모델은 모호하다. 따라서 작업에 맞는 도구를 맞추는 것이 퍼즐처럼 느껴진다.\n모델의 작업 #  상태관리  대부분의 앱에는 상태를 가져오고, 업데이트하고, 변경될 때 뷰를 다시 렌더링 할 수 있도록 반응성을 구성할 방법이 필요하다.   네트워킹 및 데이터 가져오기 모델 동작 (도메인, 앱 또는 상호 작용 논리) 인증 및 권한 부여 논리  클린 아키텍처 #  테스트 가능하고 유연한 방식으로 백엔드를 구성하는 방법에 대해 많은 정보를 제공한다. 모델을 인프라, 애플리케이션, 도메인 레이어로 분할하여 관심사 분리 설계 원칙을 실행하고 아키텍처에 대해 훨씬 더 쉽게 추론할 수 있다. 이와 같은 계층 아키텍처는 단순한 단일 계측 아키텍처보다 복잡하지만, 많은 이점이 있다.  스택의 어느 레이어에 어떤 도구가 필요한지 매우 명확하게 한다. 문제를 분리하여 유지하고 앱 및 도메인 레이어 코드 단위를 테스트 가능하게 유지할 수 있다. 테스트에 비용이 많이 드는 것을 모킹하고 라이브러리와 프레임워크를 교체할 수 있다.(필요한 경우에)    원칙 #  클라이언트에 클린 아키텍처를 그대로 따라할 필요는 없지만, 클린 아키텍처의 디자인 원칙과 관행을 보고 이를 클라이언트에 적용하는 것은 좋은 생각이라고 본다. 각 원칙은 어떤 식으로든 수행할 수 있는 작업과 작업 구성 방식에 대한 구조적 제약을 적용하는 것이다.  명령 쿼리 분리 #     commands - 상태를 변경하지만 데이터를 반환하지 않음.  function createUser (props: UserDetails): Promise\u0026lt;void\u0026gt; { ... } function selectTodo (todoId: number): void { ... }  queries - 데이터를 반환하지만 상태를 변경하지 않음  function getCurrentUser (): Promise\u0026lt;User\u0026gt; { ... } function getUserById (userId: UserId): Promise\u0026lt;User\u0026gt; { ... }  이 패턴의 주요 이점은 코드를 보다 쉽게 추론할 수 있다. 하나는 읽기용이고 하나는 쓰기용이다.  관심사 분리 #      클라이언트에서 위와 같이 관심사를 분리할 수 있다.\n     기능은 수직 슬라이스다.\n 기능 = 모듈?    레이어 #    Presentation Components #  화면 구성요소는 UI 렌더링 및 사용자 이벤트를 생성한다. 화면 구성요소는 구현 세부사항이다. 화면 구성요소를 테스트할 때는 주로 UI 로직에 대해 테스트한다.  UI Logic #  어떤 상황에 어떤 화면을 보여줘야 하는지, 사용자 이벤트에 대한 호출 시기를 결정하는 조건등이 UI논리이다. UI 로직은 실제로 컴포넌트 내에서 테스트하려고 하는 것이다. (통합테스트)  컨테이너 / 컨트롤러 #  전통적으로 컨테이너 컴포넌트의 책임은 다음과 같다.  사용자 이벤트를 소비하고 모델에 전달 데이터 변경 사항을 구독하고 보기를 업데이트된 상태로 유지   반응형 모델에 연결하는 방법과 프레젠테이션 구성 요소에서 발생하는 이벤트를 처리하는 방법을 아는데 책임이 있다.  인터렉션 레이어 #  의사 결정 계층이다. api 요청을 할 때 백엔드로 통신하기 전 이 요청을 보낼지 결정할 수 있다. 클린아키텍처에서 애플리케이션 레이어로 보면 된다. 리액트 훅이 아닌 다른 방법으로도 모델을 구현할 수 있다. (xState, pojo-observer) 일반적으로 여러 레이어가 있다. (인증, 로깅, 구독, 렌더링 로직, 메타데이터 등)  네트워킹 및 데이터 가져오기 #  이 계층의 책임은 다음과 같다.  백엔드 서비스의 위치 파악 응답 공식화 응답 데이터 또는 오류 마샬링 비동기 상태 보고    상태 관리 및 저장 #  상태 관리 라이브러리에는 세가지 책임이 있다.  저장소 - 일반적으로 저장소/클라이언트 측 캐시 어딘가에서 전역 상태를 유지한다. 데이터 업데이트 중 - 캐시의 데이터를 변경한다. 반응성 - 뷰 레이어 프레젠테이션 구성 요소가 데이터를 구독하고 데이터가 변경되면 다시 렌더링 할 수 있는 방법을 제공한다.    거의 2년전 게시글인데 리액트 쿼리 사용하는 현재 시점에선 위 아키텍처랑 비슷하게 개발하고 있는 것 같다. 애플리케이션 레이어에서 리액트 훅 없이 모델을 구현하는 방법이 궁금하다.\n","date":"2022 / 04 / 24","permalink":"/posts/study/etc/client-architecture/","section":"Posts","summary":"클라이언트 측 아키텍처 기본 요약","title":"클라이언트 측 아키텍처 기본 요약"},{"content":"의도를 분명히 밝혀라 #  좋은 이름을 지으려면 시간이 걸리지만 좋은 이름으로 절약하는 시간이 훨씬 더 많다. 이름을 주의깊게 살펴 더 나은 이름으로 개선한다면 코드를 읽는 사람이 좀 더 행복해지리라. 변수, 함수, 클래스 이름은 다음과 같은 굵직한 질문에 모두 답해야 한다.  존재 이유는? 수행 기능은? 사용 방법은? 따로 주석이 필요하다면 의도를 분명히 드러내지 못했다는 말이다.   코드 맥락이 코드 자체에 명시적으로 드러나야 한다. 단순히 이름만 고쳐도 함수가 하는 일을 이해하기 쉬워진다.  그릇된 정보를 피하라 #  프로그래머는 코드에 그릇된 단서를 남겨서는 안 된다.  예를들어 직각삼각형의 빗변으로 표현할 때 ‘hp’는 훌륭한 약어로 보일지라도 독자에게 그릇된 정보를 제공한다. (유닉스 변종을 가리키는 이름이기 때문에 헷갈릴 수 있다.) 여러 계정을 그룹으로 묶을 때, 실제 List가 아니라면 accountList라 명명하지 마라.  프로그래머에게 List는 특수한 의미이다. 실제 List가 아니라면 프로그래머에게 그릇된 정보를 제공한 셈이다. accountGroup, bunchOfAccounts나 단순히 Accounts라 명명하는게 낫다.     서로 흡사한 이름을 사용하지 않도록 주의하라. 유사한 개념은 유사한 표기법을 사용해야 한다.  일관성이 떨어지는 표기법은 그릇된 정보다. IDE의 자동완성 기능은 주석까지 노출해주지 않는다.    의미 있게 구분하라 #  컴파일러나 인터프리터만 통과하려는 생각으로 코드를 구현하는 프로그래머는 스스로 문제를 일으킨다. 컴파일러를 통과할지라도 연속된 숫자를 덧붙이거나 불용어(noise word)를 추가하는 방식은 적절하지 못하다.  이름이 달라야 한다면 의미도 달라져야 한다. 연속적인 숫자를 덧붙인 이름(a1, a2, a3\u0026hellip;)는 아무런 정보를 제공하지 못한다. 저자의 의도도 드러나지 않는다.   Info나 Data와 같은 단어는 a, an, the와 마찬가지로 의미가 불분명한 불용어이다.  ProductInfo, ProductData 이 두 이름은 개념을 구분하지 않은 채 이름만 달리한 경우다. 아무런 정보를 제공하지 못한다.   명확한 관례가 없다면 money와 moneyAmount는 구분이 안 된다. 읽는사람이 차이를 알도록 이름을 짓자.  발음하기 쉬운 이름을 사용하라 #  발음하기 어려운 이름은 토론하기 어렵다.  검색하기 쉬운 이름을 사용하라 #  문자 하나를 사용하는 이름과 상수는 텍스트 코드에서 쉽게 눈에 띄지 않는다는 문제점이 있다. ‘MAX_CLASSES_PER_STUDENT’는 검색으로 찾기 쉽지만, 숫자 7은 어렵다. e라는 문자도 변수 이름으로 적합하지 못하다. 대부분의 프로그램의 모든 문장에서 등장한다. 이런 관점에서 긴 이름이 짧은 이름보다 좋다. 검색하기 쉬운 이름이 상수보다 좋다.  인코딩을 피하라 #  굳이 부담을 더하지 않아도 이름에 인코딩할 정보는 아주 많다. 유형이나 범위 정보까지 인코딩에 넣으면 그만큼 이름을 해독하기 어려워진다. 요즘 나오는 프로그래밍 언어는 많은 타입을 지원하고, IDE에서는 코드를 컴파일 하지 않고도 타입오류를 감지할 정도로 발전했다. 이제는 헝가리식 표기법이나 기타 이름에 타입을 표기하는 방식은 오히려 방해가 될 뿐이다. 인터페이스 클래스와 구현 클래스  개인적으로 밥아저씨는 인터페이스 이름은 접두어를 붙이지 않는 편이 좋다고 생각한다. 다루고 있는 클래스가 인터페이스라는 사실을 남에게 알리고 싶지 않다. 클래스의 사용자는 그냥 ShapeFactory라고만 생각하면 좋겠다. 인터페이스 클래스 이름과 구현 클래스 이름 중 하나를 인코디해야 한다면 구현 클래스 이름을 택하겠다. (ShapeFactoryImp가 IShapeFactory 보다 낫다)    자신의 기억력을 자랑하지 마라 #  독자가 코드를 읽으면서 변수 이름을 자신이 아는 이름으로 변환해야 한다면, 그 변수 이름은 바람직하지 못하다. 일반적으로 문제 영역이나 해법 영역에서 사용하지 않는 이름을 선택했기 때문에 생기는 문제다. 전문가 프로그래머는 명료함이 최고라는 사실을 이해한다. 전문가 프로그래머는 자신의 능력을 좋은 방향으로 사용해 남들이 이해하는 코드를 내놓는다.  클래스 이름 #  클래스 이름과 객체 이름은 명사나 명사구가 적합하다.  Customer, WikiPage, Account, AddressParser 등 Manager, Processor, Data, Info 등과 같은 단어는 피하고, 동사는 사용하지 말자.    메서드 이름 #  메서드 이름은 동사나 동사구가 적합하다.  postPayment, deletePage, save 등   접근자, 변경자, 조건자는 표준에 따라 값 앞에 get, set, is를 붙인다.  기발한 이름은 피하라 #  이름이 너무 기발하면 저자와 유머 감각이 비슷한 사람만, 그리고 농담을 기억하는 동안만 이름을 기억한다. 특정 문화에서만 사용하는 농담은 피하는 편이 좋다. 의도를 분명하고 솔직핟게 표현하라  한 개념에 한 단어를 사용하라 #  추상적인 개념 하나에 단어 하나를 선택해 이를 고수하자. 같은 메서드를 클래스마다 fetch, retrieve, get으로 제각각 부르면 혼란스럽다. 메서드 이름은 독자적이고 일관적이어야 주석을 뒤져보지 않고도 프로그래머가 올바른 메서드를 선택할 수 있다.  말장난을 하지마라 #  한 단어를 두 가지 목적으로 사용하지 마라. 때로는 프로그래머가 같은 맥락이 아닌데도 ‘일관성\u0026rsquo;을 고려해 한 단어로 두 가지 역할을 수행하도록 한다.  여러 클래스에서 add라는 메서드를 ‘숫자를 더함’의 의미로 사용하고 있는 상황에서 ‘집합에 값을 추가\u0026rsquo;하는 메서드를 만들 때는 ‘insert’, ‘append’와 같은 이름을 사용해야 한다. 일관성을 위해 다른 목적의 메서드를 같은 이름인 add로 부른다면 이는 말장난이다.   프로그래머는 코드를 최대한 이해하기 쉽게 짜야 한다. 집중적인 탐구가 필요한 코드가 아니라 대충 훑어봐도 이해할 코드 작성이 목표다. 의미를 해독할 책임이 독자에게 있는 논문 모델이 아니라 의도를 밝힐 책임이 저자에게 있는 잡지 모델이 바람직하다.  해법 영역 가져온 이름을 사용하라 #  코드를 읽을 사람도 프로그래머이므로 전산용어, 알고리즘 이름, 패턴 이름, 수학 용어 등을 사용해도 괜찮다. 모든 이름을 문제 영역(도메인)에서 가져오는 정책은 현명하지 못하다.  문제 영역에서 가져온 이름을 사용하라 #  적절한 프로그래머 용어가 없다면 문제 영역(도메인)에서 이름을 가져온다. 그러면 코드를 보수하는 프로그래머가 분야 전문가에게 의미를 물어 파악할 수 있다. 우수한 프로그래머와 설계자라면 해법 영역과 문제 영역을 구분할 줄 알아야 한다.  의미 있는 맥락을 추가하라 #   스스로 의미가 분명한 이름이면 좋지만, 대다수 이름은 그렇지 못하다.\n  그래서 클래스, 함수, 이름 공간에 넣어 맥락을 부여한다.\n state라는 이름만 보고 주소라고 유추하기 어렵다. addr 접두어를 추가해서 addrState라 쓰면 맥락이 좀 더 분명해진다.    함수 예시\nfunction printGuessStatistics(candidate: string, count: number) { let number: string, verb: string, pluralModifier: string; if (count === 0) { number = \u0026#34;no\u0026#34;; verb = \u0026#34;are\u0026#34;; pluralModifier = \u0026#34;s\u0026#34;; } else if (count === 1) { number = \u0026#34;1\u0026#34;; verb = \u0026#34;is\u0026#34;; pluralModifier = \u0026#34;\u0026#34;; } else { number = count.toString(); verb = \u0026#34;are\u0026#34;; pluralModifier = \u0026#34;s\u0026#34;; } console.log(`There ${verb}${number}${candidate}${pluralModifier}`); } 이 함수의 이름은 맥락의 일부만 제공하며, 알고리즘이 나머지 맥락을 제공한다. 함수를 끝까지 읽어보고 나서야 number, verb, pluralModifier라는 변수 세 개가 ‘통계 추측\u0026rsquo; 메시지에 사용된다는 사실이 드러난다. 맥락을 유추하는건 독자의 몫이 된다. 그냥 메서드만 훑어서는 세 변수의 의미가 불분명하다.\nclass GuessStatisticsMessage { number: string; verb: string; pluralModifier: string; make(candidate: string, count: number) { this.createPluralDependentMessageParts(count); console.log(`There ${this.verb}${this.number}${candidate}${this.pluralModifier}`); } createPluralDependentMessageParts(count: number) { if (count === 0) { this.thereAreNoLetters(); } else if (count === 1) { this.thereIsOneLetter(); } else { this.thereAreManyLetters(count); } } thereAreNoLetters() { this.number = \u0026#34;no\u0026#34;; this.verb = \u0026#34;are\u0026#34;; this.pluralModifier = \u0026#34;s\u0026#34;; } thereIsOneLetter() { this.number = \u0026#34;1\u0026#34;; this.verb = \u0026#34;is\u0026#34;; this.pluralModifier = \u0026#34;\u0026#34;; } thereAreManyLetters(count: number) { this.number = count.toString(); this.verb = \u0026#34;are\u0026#34;; this.pluralModifier = \u0026#34;s\u0026#34;; } } 위와 같이 GuessStatisticsMesssage라는 클래스를 만든 후 세 변수를 클래스에 넣으니 변수의 맥락이 분명해졌다. 이렇게 맥락을 개선하면 함수를 쪼개기 쉬워지고 알고리즘도 더 명확해진다.\n  불필요한 맥락을 없애라 #  ‘고급 휘발유 충전소(Gas Station Deluxe)’라는 애플리케이션을 짤 때 모든 클래스의 이름을 GSD로 시작하겠다는 생각은 바람직 하지 못하다. 일반적으로 짧은 이름이 긴 이름보다 좋다. 단, 의미가 분명한 경우에 한해서만.  그러므로 이름에 불필요한 맥락을 추가하지말자.   accountAddress, customerAddress는 Address 클래스 인스턴스로는 좋은 이름이나 클래스 이름으로는 적합하지 못하다.  마치면서 #  좋은 이름을 선택하려면 설명 능력이 뛰어나야 하고 문화적인 배경이 같아야 한다. 좋은 이름을 선택하는 능력은 기술, 비즈니스, 관리 문제가 아니라 교육 문제다. 우리 분야 사람들이 이름 짓는 방법을 제대로 익히지 못하는 이유는 이 때문이다. 사람들이 이름을 바꾸지 않으려는 이유 하나는 다른 개발자가 반대할까 두려워서다.  우리들 대다수는 자신이 짠 클래스 이름과 메서드 이름을 모두 암기하지 못한다. 암기는 요즘 나오는 도구에게 맡기고, 우리는 문장이나 문단처럼 읽히는 코드 아니면 적어도 표나 자료 구조처럼 읽히는 코드를 짜는데만 집중해야 마땅하다. 여느 코드 개선 노력과 마찬가지로, 이름 역시 나름대로 바꿨다가 누군가의 질책을 받을 지 모르지만 그렇다고 코드를 개선하려는 노력을 중단해서는 안된다.    ","date":"2022 / 04 / 24","permalink":"/posts/study/clean-code/02-naming/","section":"Posts","summary":"클린코드 2장 의미있는 이름 요약","title":"클린코드 2장 의미있는 이름 요약"},{"content":"이 책은 좋은 프로그램 작성 요령을 설명하는 책이다. 코드에 대한 많은 사실, 좋은 코드와 나쁜 코드를 구분하는 능력, 나쁜 코드를 좋은 코드로 바꾸는 실력을 배울 수 있다.\n코드가 존재하리라 #  코드는 자동으로 생성하는 시대가 오면 프로그래머는 필요가 없어질까? 아니다. 앞으로도 코드가 사라질 가능성은 없다. 코드는 요구사항을 상세히 표현하는 수단이다. 기계가 실행할 정도로 상세하게 요구사항을 명시하는 작업, 이것이 프로그래밍이다. 우리가 시키는 대로가 아니라 원하는 대로 돌아가는 기계가 나오는 것은 불가능하다. 요구사항을 모호하게 줘도 우리 의도를 정확히 꿰뚫어보는 프로그램 말이다. 창의력과 직관을 보유한 인간조차 고객의 막연한 감정만 갖고는 성공적인 시스템을 구현하지 못한다. 프로그래밍 언어에서 추상화 수준은 점차 높아지겠지만, 코드가 사라지진 않을 것이다,  나쁜 코드 #  우리 모두는 자신이 짠 쓰레기 코드를 쳐다보며 나중에 손보겠다고 생각한 경험이 있다. 나중은 결코 돌아오지 않는다.  나쁜 코드로 치르는 대가 #  나쁜 코드는 개발 속도를 크게 떨어뜨린다. 시간을 들여 깨끗한 코드를 만드는 노력이 비용을 절감하는 방법일 뿐만 아니라 전문가로서 살아남는 길이다. 우리는 나쁜 코드가 작성한 것에 대해 온갖 이유를 들이댄다. (요구사항 변경, 시간 독촉 등)  하지만 이는 우리의 잘못이다. 시간을 독촉하는 관리자는 그것이 그들의 책임이기 때문에 한 것이다. 좋은 코드를 사수하는 일은 프로그래머의 책임이다.   나쁜 코드의 위험을 이해하지 못하는 관리자의 말을 그대로 따르는 행동은 전문가 답지 못하다. 시간이 없다고 나쁜 코드를 양산하면 오히려 더 늦어진다. 빨리가는 유일한 방법은, 언제나 코드를 최대한 깨끗하게 유지하는 습관이다.  깨끗한 코드라는 예술? #  깨끗한 코드를 작성하려면 \u0026lsquo;청결\u0026rsquo;이라는 감각을 활용해 자잘한 기법들을 적용하는 절제와 규율이 필요하다. 열쇠는 \u0026lsquo;코드 감각\u0026rsquo;이다. 타고날 수도 있고, 노력으로 얻을 수 있다. \u0026lsquo;코드 감각\u0026rsquo;이 있으면 좋은 코드와 나쁜 코드를 구분할 뿐만 아니라, 절제와 규율을 적용해 나쁜 코드를 좋은 코드로 바꾸는 전략도 파악한다. \u0026lsquo;코드 감각\u0026rsquo;이 없는 프로그래머도 때로는 나쁜 모듈을 알아보지만 그것으로 끝이다. 코드 감각\u0026rsquo;이 있는 프로그래머는 나쁜 모듈을 보면 좋은 모듈로 개선할 방안을 떠올린다.  깨끗한 코드란? #  유명한 프로그래머에게 의견을 물었다. 비야네 스트롭스트룹  논리가 간단해야 버그가 숨어들지 못한다. 의존성을 최대한 줄여야 유지보수가 쉬워진다. 오류는 명백한 전략에 의거해 철저히 처리한다.  프로그래머들이 대충 넘어가는 부분 중 하나가 오류처리다. 깨끗한 코드를 위해 세세한 사항까지 꼼꼼히 처리하자.   성능을 최적으로 유지해야 사람들이 원칙 없는 최적화로 코드를 망치려는 유혹에 빠지지 않는다. 깨끗한 코드는 한 가지를 제대로 한다.  나쁜 코드는 너무 많은 일을 하려 애쓰다가 의도가 뒤섞이고 목적이 흐려진다.     창문이 깨진 건물은 누구도 상관하지 않는다는 인상을 품긴다.  그래서 사람들도 관심을 끊는다. 창문이 더 깨져도 상관하지 않는다. 마침내 자발적으로 창문을 깨고 외벽에 낙서를 방치하고 차고에 쓰레기가 쌓여도 치우지 않는다. 창문이 깨지고 나면 쇠퇴하는 과정이 시작된다.   그래디 부치  깨끗한 코드는 단순하고 직접적이다. 깨끗한 코드는 잘 쓴 문장처럼 읽힌다. 깨끗한 코드는 결코 설계자의 의도를 숨기지 않는다. 오히려 명쾌한 추상화와 단순한 제어문으로 가득하다.   데이브 토마스  깨끗한 코드는 작성자가 아닌 사람도 읽기 쉽고 고치기 쉽다. 단위 테스트 케이스와 인수 테스트 케이스가 존재한다. 깨끗한 코드에는 의미 있는 이름이 붙는다. 특정 목적을 달성하는 방법은 하나만 제공한다. 의존성은 최소이며 각 의존성을 명확히 정의한다. api는 명확하며 최소로 줄였다. 언어에 따라 필요한 모든 정보를 코드만으로 명확히 표현할 수 없기에 코드는 문학적으로 표현해야 마땅하다.   마이클 페더스  깨끗한 코드는 언제나 누군가 주의 깊게 짰다는 느낌을 준다. 고치려고 살펴봐도 딱히 손 댈 곳이 없다. 작성자가 이미 모든 사항을 고려했으므로 고칠 궁리를 하다보면 언제나 제자리로 돌아온다.   론 제프리스  모든 테스트를 통과한다. 중복이 없다. 시스템 내 모든 설계 아이디어를 표현한다. 클래스, 메서드, 함수등을 최대한 줄인다.   워드 커닝햄  코드를 읽으면서 짐작했던 기능을 각 루틴이 그대로 수행한다면 깨끗한 코드라 부를 수 있다. 코드가 그 문제를 풀기 위한 언어처럼 보인다면 아름다운 코드라 불러도 된다.   프로그램을 단순하게 모이도록 만드는 열쇠는 언어가 아니다. 언어를 단순하게 보이도록 만드는 열쇠는 프로그래머다.  밥아저씨의 생각 #  이 책은 밥 아저씨와 동료들이 정의한 깨끗한 코드를 상세히 설명한다. 사람마다 클린 코드에 대한 정의는 다르므로, 이 책에서 정의하는 클린코드가 진리이고 다른 코드가 틀린것은 아니다.  보이스카우트 규칙 #  잘 짠 코드가 전부는 아니다. 시간이 지나도 언제나 깨끗하게 유지해야 한다. 시간이 지나면서 엉망으로 전락하는 코드가 한둘이 아니다. 캠프장을 처음 왔을 때 보다 더 깨끗하게 해놓고 떠나라. 체크아웃할 때보다 좀 더 깨끗한 코드를 체크인한다면 코드는 절대 나빠지지 않는다.  결론 #  이 책을 읽는다고 뛰어난 프로그래머가 된다는 보장은 없다. 단지 뛰어난 프로그래머가 생각하는 방식과 그들이 사용하는 기술과 기교와 도구를 소개할 뿐이다.  ","date":"2022 / 04 / 23","permalink":"/posts/study/clean-code/01-clean-code/","section":"Posts","summary":"클린코드 1장 깨끗한 코드 요약","title":"클린코드 1장 깨끗한 코드 요약"},{"content":"hugo + congo 테마로 블로그 개설했습니다.\n이전에도 기술 블로그를 꾸준하게 운영하긴 했습니다. 이전 블로그인 노션 블로그는 seo 검색 노출이 잘 안되고, 티스토리는 맘에 드는 테마가 없었고, hashnode는 좀 느리고 등등 이런 저런 이유로 한 플랫폼에 정착하지 못하고 계속 옮겨다녔습니다. 이전에 작성했던 기록들이 버려지는게 아쉽네요.\n이번 블로그는 디자인도 맘에들어서 seo 노출만 잘 된다면 꾸준하게 오래오래 운영해보겠습니다 :)\nreference # 이전 블로그\ncongo 테마\n","date":"2022 / 04 / 15","permalink":"/posts/hello/","section":"Posts","summary":"soso01 개발 블로그 생성","title":"블로그 개설"}]